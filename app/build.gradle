// com.android.application 表明是一个应用程序，打包出来是 .apk，可以直接运行
// com.android.application 表明是一个库，打包出来是一个 .aar，依附应用程序运行
apply plugin: 'com.android.application'

//包名
def PACKAGE_NAME = "pri.ky2.ky2coderepos"

// 配置项目构建的各种属性
android {
    // 编译时用的 Android 版本
    compileSdkVersion 27

    defaultConfig {
        // 项目包名
        applicationId PACKAGE_NAME
        // 项目兼容的最低版本，低于这个版本，APP 无法安装
        minSdkVersion 18
        // 项目的目标版本，表明已经在这个版本上做了充分的测试
        // Android 系统的行为变更，只有 targetSdkVersion 大于等于这个系统版本值得时候才会生效
        // 例如，targetSdkVersion 支持 4.1，那么在 5.0 的手机上新特性就不会启用
        targetSdkVersion 23
        // 版本号
        versionCode 1
        // 版本名
        versionName "1.0"
        // 要使用AndroidJUnitRunner进行单元测试
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        // 默认 HOST
        buildConfigField "String", "HOST", "\"https://api.github.com/\""
    }

    // 自动化打包配置
    signingConfigs {
        release {
            storeFile file('../keystore/xxx.jks')
            storePassword "xxxxxxxxxx"
            keyAlias "xxxxxxx"
            keyPassword "xxxxxxxxxx"
        }
    }

    // 配置目录指向
    // 这里是将 res 里的 layout 文件夹分类
    sourceSets {
        main {
            res.srcDirs =
                    [
                            'src/main/res/layout/activity',
                            'src/main/res/layout/common',
                            'src/main/res/layout/dialog',
                            'src/main/res/layout/fragment',
                            'src/main/res/layout/itemviews',
                            'src/main/res/layout/customviews',
                            'src/main/res'
                    ]
        }
    }

    // 代码扫描分析
    // 程序在编译的时候会检查 lint，有任何错误提示会停止 build，我们可以关闭这个开关
    lintOptions {
        abortOnError false //即使报错也不会停止打包
        checkReleaseBuilds false  //打包release版本的时候进行检测
    }

    // 开发、线上环境 配置
    buildTypes {

        // 开发版安装文件的配置
        debug {
            // 不混淆代码
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//            signingConfig signingConfigs.release
        }

        // 正式版安装文件的配置
        release {
            // 混淆代码
            minifyEnabled true
            // 指定混淆的规则文件
            // proguard-android.txt 为默认的混淆文件，定义了通用的混淆规则
            // proguard-rules.pro 位于项目的根目录下，定义项目特有的混淆规则
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            // 使用签名
//            signingConfig signingConfigs.release
        }
    }

    flavorDimensions "ky2"

    // 多渠道配置
    productFlavors {
        //开发环境
        Dev {
            applicationIdSuffix ".dev"
            buildConfigField "String", "HOST", "\"https://api.github.com/\""
        }

        //测试环境
        Qa {
            applicationIdSuffix ".qa"
            buildConfigField "String", "HOST", "\"https://api.github.com/\""
        }

        //应用宝
        YYB {}

        //百度手机助手
        Baidu {}

        //小米
        Mi {}

        //华为
        Huawei {}

        //OPPO
        OPPO {}

        //Vivo
        Vivo {}

        //360
        Qihu {}
    }

    // 给渠道变量赋值
    productFlavors.all { flavor ->
        def app_name = "KY2Repos"

        if (name == "Dev") {
            app_name = app_name + name
        } else if (name == "Qa") {
            app_name = app_name + name
        }
        flavor.manifestPlaceholders = [
                CHANNEL_VALUE: name,
                APP_NAME     : app_name
        ]
    }

    // 修改 .apk 文件的名字
    android.applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = (String) (project.archivesBaseName +
                    "-" + variant.flavorName +
                    "-" + variant.buildType.name +
                    "-" + variant.mergedFlavor.versionName +
                    "-" + variant.mergedFlavor.versionCode + ".apk")
        }
    }
}

// 项目的依赖关系
// 本地依赖：对本地 jar 或者目录添加依赖关系
// 库依赖：对项目中库模块添加依赖关系
// 远程依赖：对 jcenter 库上的开源项目添加依赖关系
// implementation：不会传递依赖
// api：会传递依赖，与 compile 效果完全相同
// 当依赖被传递时，二级依赖的改动会导致 0 级项⽬目重新编译;
// 当依赖不传递时，二级依赖的改动不会导致 0 级项⽬目重新编译，所以使用 implementation 减少耦合度
dependencies {
    // implementation fileTree是一个本地依赖声明
    // 表示将libs目录下所有.jar后缀的文件都添加到项目的构建路径当中
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    // com.android.support 为域名部分,用于区分不同公司的库
    // appcompat-v7 为组件名称，用于区分同一个公司的不同库
    // 27.+ 为版本号，用于区分同一个库的不同版本
    // 这句声明后，Gradle在构建项目时会先检查一下本地是否已经缓存过该库，
    // 若没有缓存则自动联网下载，下载后自动添加到项目的构建路径中去。
    implementation 'com.android.support:appcompat-v7:27.+'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    //ButterKnife
    implementation 'com.jakewharton:butterknife:8.8.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'

    //Retrofit + RxJava + Gson + FastJson
    implementation 'com.squareup.retrofit2:retrofit:2.3.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.3.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.2'
    implementation 'io.reactivex.rxjava2:rxjava:2.1.9'
    implementation 'com.alibaba:fastjson:1.2.35'

    // 网络日志拦截器
    implementation 'com.squareup.okhttp3:logging-interceptor:3.8.0'

    // 各种工具类
    implementation 'com.blankj:utilcode:1.23.7'

    // 数据库
    implementation 'org.litepal.android:java:3.0.0'

    // 格式化日志工具
    implementation 'com.orhanobut:logger:2.2.0'
}
